//////////////////////////////////////////////////////////////////////////////
// *
// * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
// * Copyright (C) 2011 Spectrum Digital, Incorporated
// *
// *
// *  Redistribution and use in source and binary forms, with or without
// *  modification, are permitted provided that the following conditions
// *  are met:
// *
// *    Redistributions of source code must retain the above copyright
// *    notice, this list of conditions and the following disclaimer.
// *
// *    Redistributions in binary form must reproduce the above copyright
// *    notice, this list of conditions and the following disclaimer in the
// *    documentation and/or other materials provided with the
// *    distribution.
// *
// *    Neither the name of Texas Instruments Incorporated nor the names of
// *    its contributors may be used to endorse or promote products derived
// *    from this software without specific prior written permission.
// *
// *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// *
//////////////////////////////////////////////////////////////////////////////
/**
 * coeffdef_fft.h
 *
 *  Created on: Dec 3, 2013
 *      Author: a0132717
 */

#ifndef COEFFDEF_FFT_H_
#define COEFFDEF_FFT_H_

/** Number of data points in the input data. */
#define NX (1024)

/** Window size of the data samples */
#define WINLEN (64)

/** Size of FFT; FFTLEN = (data window length) + (filter order) - 1;
 * In this demo, filter order is (data Window length + 1). Therefore,
 * FFTLEN = 64
 */
#define FFTLEN (2 * WINLEN)

/* Input data; Time domain signal
 * The function prepares the data for the cfft function by alternating real and imaginary parts
 */
//short x[NX] = {
//		19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,-0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,-0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,-0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,-0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,-0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,-0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,-0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,-0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,-0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,-0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,-0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,-0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,-0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,-0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,-0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,-0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,-0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,-0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,-0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,-0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297,-9830,-9546,-9268,-9750,-11351,-13883,-16674,-18843,-19661,-18843,-16674,-13883,-11351,-9750,-9268,-9546,-9830,-9297,-7406,-4133,-0,4133,7406,9297,9830,9546,9268,9750,11351,13883,16674,18843,19661,18843,16674,13883,11351,9750,9268,9546,9830,9297,7406,4133,0,-4133,-7406,-9297
//};

// Output of the filter; Real and imaginary parts are alternated. Time domain signal
#pragma DATA_ALIGN (32)
short x_filter[NX];


//Filter coefficients in the frequency domain. Real and imaginary parts are alternated.
/*DATA filterCoeff[FFTLEN*2] = {
		23170,23170,23170,23170,23170,23170,23170,23170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23170,23170,23170,23170,23170,23170,23170,23170
};*/

// filter order is WINLEN+1, so that the convolution length is 2*WINLEN = FFTLEN
#pragma DATA_ALIGN (32)
#if(WINLEN == 64)
short ir[WINLEN] = {
		0,-11,-22,-33,-43,-48,-45,-30,0,43,96,149,190,207,185,116,-0,-156,-333,-501,-624,-665,-588,-370,0,512,1137,1827,2523,3156,3664,3993,4106,3993,3664,3156,2523,1827,1137,512,0,-370,-588,-665,-624,-501,-333,-156,-0,116,185,207,190,149,96,43,0,-30,-45,-48,-43,-33,-22,-11
};
#elif(WINLEN == 512)
short ir[WINLEN] = {
		-0,-1,-2,-3,-3,-3,-2,-1,0,1,3,3,4,3,3,1,-0,-2,-3,-4,-4,-4,-3,-2,-0,2,3,4,5,5,4,2,-0,-2,-4,-5,-6,-6,-4,-2,0,3,5,6,7,7,5,3,0,-3,-6,-8,-9,-8,-6,-4,-0,4,7,10,11,10,8,4,-0,-5,-9,-12,-13,-12,-10,-5,0,6,10,14,15,15,11,6,-0,-7,-12,-17,-18,-17,-14,-8,-0,8,15,20,22,21,16,9,-0,-9,-17,-23,-26,-24,-19,-10,0,11,21,27,30,28,22,12,-0,-13,-24,-32,-35,-33,-26,-14,-0,15,28,37,41,38,30,17,-0,-17,-32,-43,-47,-45,-35,-19,0,20,37,50,55,51,40,22,-0,-23,-43,-57,-63,-59,-46,-25,-0,26,50,66,73,68,53,29,-0,-30,-57,-76,-84,-79,-61,-34,0,35,66,88,96,91,71,39,-0,-40,-76,-101,-112,-105,-82,-45,0,47,89,118,130,123,96,53,-0,-55,-104,-139,-153,-145,-113,-62,0,65,123,165,183,173,135,75,-0,-79,-149,-200,-222,-210,-165,-92,0,97,185,248,277,264,208,117,-0,-125,-238,-323,-363,-348,-277,-156,0,170,330,452,515,501,405,233,-0,-264,-524,-737,-865,-873,-735,-442,0,570,1228,1927,2607,3213,3689,3993,4098,3993,3689,3213,2607,1927,1228,570,0,-442,-735,-873,-865,-737,-524,-264,-0,233,405,501,515,452,330,170,0,-156,-277,-348,-363,-323,-238,-125,-0,117,208,264,277,248,185,97,0,-92,-165,-210,-222,-200,-149,-79,-0,75,135,173,183,165,123,65,0,-62,-113,-145,-153,-139,-104,-55,-0,53,96,123,130,118,89,47,0,-45,-82,-105,-112,-101,-76,-40,-0,39,71,91,96,88,66,35,0,-34,-61,-79,-84,-76,-57,-30,-0,29,53,68,73,66,50,26,-0,-25,-46,-59,-63,-57,-43,-23,-0,22,40,51,55,50,37,20,0,-19,-35,-45,-47,-43,-32,-17,-0,17,30,38,41,37,28,15,-0,-14,-26,-33,-35,-32,-24,-13,-0,12,22,28,30,27,21,11,0,-10,-19,-24,-26,-23,-17,-9,-0,9,16,21,22,20,15,8,-0,-8,-14,-17,-18,-17,-12,-7,-0,6,11,15,15,14,10,6,0,-5,-10,-12,-13,-12,-9,-5,-0,4,8,10,11,10,7,4,-0,-4,-6,-8,-9,-8,-6,-3,0,3,5,7,7,6,5,3,0,-2,-4,-6,-6,-5,-4,-2,-0,2,4,5,5,4,3,2,-0,-2,-3,-4,-4,-4,-3,-2,-0,1,3,3,4,3,3,1,0,-1,-2,-3,-3,-3,-2,-1
};
#endif

#pragma DATA_ALIGN (32)
short fr[FFTLEN*2]; //Frequency response is FFTLEN*2 because real and imaginary parts are alternated;


#endif /* COEFFDEF_FFT_H_ */

